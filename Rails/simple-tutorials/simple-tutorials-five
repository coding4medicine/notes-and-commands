Initial - 

gem install uglifier
sudo apt-get install nodejs






A-stripe-simple-demo:
---------------------

This demo creates a single stripe charge.


1.	rails new A-stripe-simple-demo

2.	add -> gem 'stripe' -> to Gemfile, and run -> bundle install

3.	rails generate controller charges new create

4.	Go to charges-controller, keep new as it  but change create to -

def create
  # Amount in cents
  @amount = 500

  customer = Stripe::Customer.create(
    :email => params[:stripeEmail],
    :source  => params[:stripeToken]
  )

  charge = Stripe::Charge.create(
    :customer    => customer.id,
    :amount      => @amount,
    :description => 'Rails Stripe customer',
    :currency    => 'usd'
  )

rescue Stripe::CardError => e
  flash[:error] = e.message
  redirect_to new_charge_path
end

5. 	in views

new.html.erb ->

<%= form_tag charges_path do %>
  <article>
    <% if flash[:error].present? %>
      <div id="error_explanation">
        <p><%= flash[:error] %></p>
      </div>
    <% end %>
    <label class="amount">
      <span>Amount: $5.00</span>
    </label>
  </article>

  <script src="https://checkout.stripe.com/checkout.js" class="stripe-button"
          data-key="<%= Rails.configuration.stripe[:publishable_key] %>"
          data-description="A month's subscription"
          data-amount="500"
          data-locale="auto"></script>
<% end %>


create.html.erb ->

<h2>Thanks, you paid <strong>$5.00</strong>!</h2>


6.	in config

comment out -
#  get 'charges/new'
#  get 'charges/create'

add -
  resources :charges


7. add stripe keys in config/initializer/stripe.rb

--------------------
Rails.configuration.stripe = {
  :publishable_key => 'pk_test_xxxxx',
  :secret_key      => 'sk_test_xxxxx'
}

Stripe.api_key = Rails.configuration.stripe[:secret_key]

--------------------


8.	rails s -b 0.0.0.0 -p 80

go to -> http://c4m.com:xxxx/charges/new/

credit card number - 4242424242424242, expiration in future, any three digit number.






B-email-works:
--------------

This demo installs devise and adds email confirmation, etc.

1.	rails new B-email-works


2. Add devise gem -

        vi Gemfile --> add  -- gem 'devise'

3. Install all gems -

        bundle install

4. Install devise components -

        rails generate devise:install
        rails generate devise user
        rails generate devise admin


set up action mailer

http://edgeguides.rubyonrails.org/action_mailer_basics.html

sudo apt-get install sendmail

sendmail or postfix?





5.	email (http://stackoverflow.com/questions/8186584/how-do-i-set-up-email-confirmation-with-devise)
	------

	A. go to models/user.rb and add ':confirmable'

	B. goto db/migration/XXX_devise_create_users.rb and uncomment all '## confirmable'

	OR,

	rails generate migration add_confirmable_to_devise

	go to db/migrate/... and add the entire text from here by replacing 'change'
		https://github.com/plataformatec/devise/wiki/How-To:-Add-:confirmable-to-Users
		http://stackoverflow.com/questions/8186584/how-do-i-set-up-email-confirmation-with-devise

	C. rake db:migrate

	D. 	

	rails generate devise:views User
	rails generate devise:views Admin

	E. set up gmail in config files

	in config/environment.rb, add

	ActionMailer::Base.smtp_settings = {
  		:user_name => 'aabbcc@gmail.com',
  		:password => 'aabbcc',
  		:domain => 'gmail.com',
  		:address => 'smtp.gmail.com',
  		:port => 587,
  		:authentication => :plain,
  		:enable_starttls_auto => true
	}

	in config/environments/development.rb, add

	config.action_mailer.default_url_options = { :host => "www.c4m.com:xxxx" }

	config.action_mailer.smtp_settings = {
		:address              => "smtp.gmail.com",
		:port                 => 587,
		:domain               => "gmail.com",
		:user_name            => "aabbcc@gmail.com",
		:password             => "aabbcc",
		:authentication       => :plain,
		:enable_starttls_auto => true
	}



	custom views
	------------

	https://github.com/plataformatec/devise
	https://github.com/plataformatec/devise/wiki/How-To:-Create-custom-layouts
	http://stackoverflow.com/questions/6646845/customizing-devise-views-in-rails
	"After rails generate devise:views make sure you go into initializers/devise.rb and set config.scoped.views = true. This is explained in the devise documentation at https://github.com/plataformatec/devise as well as in the devise.rb comments."

	
	sign out -
	----------------

	vi config/initializers/devise.rb
	change 'config.sign_out_via = :delete' to 'config.sign_out_via = :get'



6. Pages -

	rails generate scaffold Page name:string title:string content:text

	in config/routes.rb, comment out and modify - "root 'pages#index'"

	in pages_controller.rb, add 'before_action :authenticate_user!'

	clean the functions
	

7. Migration -

	rake db:migrate












C-modify-css:
-------------

This demo allows modification of css files from default devise.

1.	rails new C-modify-css

layout

http://alma-connect.github.io/techblog/2015/02/layout-and-rendering-in-rails.html#.Vuw0b9IX6Jk

http://guides.rubyonrails.org/layouts_and_rendering.html








D-payola-single-pay:
--------------------

This demo installs payola-based single stripe payment.

1.	rails new D-payola-single-pay




E-koudoku:
----------

This demo installs koudoku-based stripe subscription system along with devise.


1.	rails new E-koudoku
2.	vi Gemfile --> add  -- gem 'devise', gem 'koudoku'
3.	bundle install
4.	rails generate devise:install
        rails generate devise user
	rails generate koudoku:install user (answer Y to all questions)
	rails generate scaffold Post name:string title:string content:text
	rake db:migrate


5.	create plans from 'rails console'

irb(main):> Plan.create({name:'platinum', price: 29.99, interval: 'month', stripe_id: 'platinum', features: 'none', display_order: 1})

6.	In app/helper/application_helper.rb,

module ApplicationHelper
    include Koudoku::ApplicationHelper
end

7.	In views/layout/application.html.erb, add -

	<%= yield :koudoku %>

---
undefined method `plan_price'

https://github.com/andrewculver/koudoku/issues/121

---


before </head>

9.	in views/posts/index.html.erb, add

<%= link_to 'Pricing', main_app.pricing_path %>

10.	add stripe keys in config/initializer/koudoku.rb or in environment variable





